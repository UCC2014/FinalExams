module Graph ( Graph, Node, Edge,
               -- Standard Graph
               emptyGraph, nodes, edges, s2n, n2s, ns2e, e2ns,
               insertNode, insertEdge, outEdges,
               -- GRAPH additions
               graph, ugraph, outNeighbours, neighbours, start, finish,
               -- Samples
               g1, g2) where

--------------------------------------------------------------------------------
-- I N T E R F A C E  :  P U B L I C
--------------------------------------------------------------------------------

-- Graph : an unweighted directed graph

--------------------------------------------------------------------------------

-- Node : a node

--------------------------------------------------------------------------------

-- Edge : an edge

--------------------------------------------------------------------------------

-- emptyGraph : the empty graph

emptyGraph :: Graph

--------------------------------------------------------------------------------

-- nodes g : a list of the nodes in graph 'g'

nodes :: Graph -> [ Node ]

--------------------------------------------------------------------------------

-- edges g : a list of the edges in graph 'g'

edges :: Graph -> [ Edge ]

--------------------------------------------------------------------------------

-- s2n s : a node with label 's'

s2n :: String -> Node

--------------------------------------------------------------------------------

-- n2s n : the label of node 'n'

n2s :: Node -> String

--------------------------------------------------------------------------------

-- ns2e ( n1, n2 ) : an edge from node 'n1' to node 'n2'

ns2e :: ( Node, Node ) -> Edge

--------------------------------------------------------------------------------

-- e2ns ( n1, n2 ) : a tuple of the starting and finishing nodes of edge 'e'

e2ns :: Edge -> ( Node, Node )

--------------------------------------------------------------------------------

-- insertNode n g : the graph formed by inserting node 'n' into graph 'g'

insertNode :: Node -> Graph -> Graph

--------------------------------------------------------------------------------

-- insertEdge e g : the graph formed by inserting edge 'e' into graph 'g'

insertEdge :: Edge -> Graph -> Graph

--------------------------------------------------------------------------------

-- outEdges n g : a list of the edges starting from node 'n' in graph 'g'

outEdges :: Node -> Graph -> [ Edge ]

--------------------------------------------------------------------------------

-- graph n g : the directed graph formed from
--                all nodes corresponding to
--                   the list of strings 'sns'
--                all edges corresponding to
--                   the list of 2-tuples of strings 'ses'
graph :: [ String ] -> [ ( String, String ) ] -> Graph

--------------------------------------------------------------------------------

-- ugraph n g : the undirected graph formed from
--                 all nodes corresponding to
--                    the list of strings 'sns'
--                 all edges corresponding to
--                    the list of 2-tuples of strings 'ses'
ugraph :: [ String ] -> [ ( String, String ) ] -> Graph

--------------------------------------------------------------------------------

-- outNeighbours n g : a list of the nodes reachable along a single out-edge from 
--                  node 'n' in graph 'g'. For use in 2013 Summer Q2
outNeighbours :: Node -> Graph -> [ Node ]

--------------------------------------------------------------------------------

-- neighbours n g : alias of outNeighbours
neighbours :: Node -> Graph -> [ Node ]

--------------------------------------------------------------------------------

-- start e : the start node of edge 'e'
start :: Edge -> Node

--------------------------------------------------------------------------------

-- finish e : the finish node of edge 'e'
finish :: Edge -> Node

--------------------------------------------------------------------------------

-- g1 : sample undirected graph
g1 :: Graph

--------------------------------------------------------------------------------

-- g1 : sample directed graph
g2 :: Graph

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- I M P L E M E N T A T I O N  :  P R I V A T E
--------------------------------------------------------------------------------

--SIMPLIFIED IMPLEMENTATION : NO ERROR-CHECKING PERFORMED

--------------------------------------------------------------------------------

data Graph = G [ Node ] [ Edge ]

--------------------------------------------------------------------------------

data Node = N String deriving Eq

--------------------------------------------------------------------------------

data Edge = E Node Node deriving Eq -- ( start, finish )

--------------------------------------------------------------------------------

emptyGraph = G [] []

--------------------------------------------------------------------------------

nodes ( G ns _ ) = ns

--------------------------------------------------------------------------------

edges ( G _ es ) = es

--------------------------------------------------------------------------------

s2n s = N s

--------------------------------------------------------------------------------

n2s ( N s ) = s

--------------------------------------------------------------------------------

ns2e ( n1, n2 ) = E n1 n2

--------------------------------------------------------------------------------

e2ns ( E n1 n2 ) = ( n1, n2 )

--------------------------------------------------------------------------------

insertNode n ( G ns es ) = G ( n : ns ) es

--------------------------------------------------------------------------------

insertEdge e ( G ns es ) = G ns ( e : es )

--------------------------------------------------------------------------------

outEdges n ( G _ es ) = [ e | e <- es, fst ( e2ns e ) == n ]

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- GRAPH ADT
--------------------------------------------------------------------------------

graph sns ses = insertEdges [ ns2e ( s2n s1, s2n s2 ) | ( s1, s2 ) <- ses ]
                            ( insertNodes [s2n s | s <- sns ] emptyGraph )

--------------------------------------------------------------------------------

-- insertNodes ns g : the graph formed by inserting all nodes in the list 'ns'
--                    into graph 'g'

insertNodes :: [ Node ] -> Graph -> Graph
insertNodes ns g = foldr insertNode g ns

--------------------------------------------------------------------------------

-- insertEdges es g : the graph formed by inserting all edges in the list 'es'
--                    into graph 'g'

insertEdges :: [ Edge ] -> Graph -> Graph
insertEdges es g = foldr insertEdge g es

--------------------------------------------------------------------------------

ugraph sns ses = graph sns ( foldr ( \( s, f ) -> \acc ->
                                        ( s, f ) : ( f, s ) : acc )
                                   [ ]
                                   ses )

--------------------------------------------------------------------------------

outNeighbours n g = [ finish e | e <- outEdges n g ]

--------------------------------------------------------------------------------

neighbours = outNeighbours

--------------------------------------------------------------------------------

start e = fst ( e2ns e )

--------------------------------------------------------------------------------

finish e = snd ( e2ns e )

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
-- Samples
--------------------------------------------------------------------------------

g1 = ugraph [ "A", "B", "C", "D", "E", "F", "G", "H"]
            [ ( "A", "B" ), ( "A", "C" ), ( "A", "E" ),
              ( "B", "D" ), ( "B", "E" ),
              ( "C", "F" ), ( "C", "G" ),
              ( "D", "E" ),
              ( "F", "G" ) ]

--------------------------------------------------------------------------------

g2 = graph [ "0", "+1", "-1", "+2", "-2", "+3", "-3", "+4", "-4"]
           [ ( "0", "+1" ), ( "+1", "+2" ), ( "+2", "+3" ), ( "+3", "+4" ),
             ( "0", "-1" ), ( "-1", "-2" ), ( "-2", "-3" ), ( "-3", "-4" ) ]

--------------------------------------------------------------------------------